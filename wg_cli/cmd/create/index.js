/**
 */
const fs          = require('fs');
const color       = require('chalk');
const shell       = require('shelljs');

const paths       = require('./../../config/paths')
const config      = require(`${paths.CONFIG}/config`)
const warns       = require(`${paths.LIB}/warns`)
const call        = require(`${paths.LIB}/caller`).call;
const nyan        = require(`${paths.LIB}/helpers`).nyan;
const hasWgConfig = require(`${paths.LIB}/helpers`).hasWgConfig;
const hasPack     = require(`${paths.LIB}/helpers`).hasPack;
const getRepositoryName = require(`${paths.LIB}/helpers`).getRepositoryName;

module.exports = (context) => {

  if(context.args[0] == 'help'){
    require('./help')();
    return;
  }
  if(hasWgConfig()){
    warns.already_has_wg_config();
    return;
  }

  // Check for the project name an the project pack args

  let name = context.args[0];
  let pack;

  /**
   * Collects the project name and the Project Pack
   * If no name, the original from git will be used
   * If no pack the default will be used, if no default
   * Will create a null modules key on .wgconfig.
   */
  if(context.args.includes('-pack') || context.args.includes('-p')){
    let flag  = context.args.includes('-p') ? '-p' : '-pack';
    let index = context.args.indexOf(flag) + 1;
    pack  = [context.args[index]]; // picked pack must be inside and array
  }

  if( !name || name.indexOf('-') == 0 || name == '-pack' || name == '-p' || name == undefined)
    name = getRepositoryName();

  if( !pack || pack == '-name' || pack == '-n' || pack == undefined)
    pack = [];

  if(pack && pack.length){
    if(!hasPack(pack[0])) {
      console.log(color.red(`\nError: There is no pack named ${pack[0]}`))
      console.log('Type "wg init packs" to see the available start packs\n')
      return;
    }
  }

  /**
   * CLONE call, command will clone a 'Widgrid Core' Repository
   * This is the basic structure of the whole project
   */
  if(context.args.indexOf('--no-clone') === -1) {
    if(!fs.existsSync(`./${name}`)){
      call('getrelease', '', {cmd: ['getrelease'], args: [name, '--ungit']});
      process.chdir(`./${name}`) // cd to the cloned repo
    } else {
      console.log(color.red(`\nERROR: The project folder "${name}" already exists`))
      console.log('Please clone to a diferent target\n');
      return;
    }
  }

  /**
   * INIT call, command which will initiate a wgconfig file on
   * the current cloned core repository. This will define the
   * characteristics of the new project. During this init call
   * the folder of this process in the cli context is changed
   * to the cloned/created project in question, to .wgconfig
   * file to be created inside the new cloned/created project
   */
  if(context.args.indexOf('--no-init') === -1)
    call('init', '', {cmd: ['init'], args: pack});

  /**
   * INSTALL call, which will install all the modules pointed
   * on the .wgconfig file generated by the 'init' command
   */
  if(context.args.indexOf('--no-install') === -1)
    call('install', '', {cmd: ['install'], args: []})

  //

  nyan();
  console.log(color.green('New Project Sucessfully Created!\n'));  
}
